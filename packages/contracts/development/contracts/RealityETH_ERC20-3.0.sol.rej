*** /dev/null
--- /dev/null
***************
*** 10
- contract Realitio is BalanceHolder {
--- 10 -----
+ contract RealitioERC20 is BalanceHolder {
***************
*** 174,176
-     modifier bondMustDouble(bytes32 question_id) {
-         require(msg.value > 0, "bond must be positive"); 
-         require(msg.value >= (questions[question_id].bond.mul(2)), "bond must be double at least previous bond");
--- 174,176 -----
+     modifier bondMustDouble(bytes32 question_id, uint256 tokens) {
+         require(tokens > 0, "bond must be positive"); 
+         require(tokens >= (questions[question_id].bond.mul(2)), "bond must be double at least previous bond");
***************
*** 296
-         _askQuestion(question_id, content_hash, arbitrator, timeout, opening_ts);
--- 332 -----
+         _askQuestion(question_id, content_hash, arbitrator, timeout, opening_ts, tokens);
***************
*** 302
-     function _askQuestion(bytes32 question_id, bytes32 content_hash, address arbitrator, uint32 timeout, uint32 opening_ts) 
--- 338,363 -----
+     function _deductTokensOrRevert(uint256 tokens) 
+     internal {
+ 
+         if (tokens == 0) {
+             return;
+         }
+ 
+         uint256 bal = balanceOf[msg.sender];
+ 
+         // Deduct any tokens you have in your internal balance first
+         if (bal > 0) {
+             if (bal >= tokens) {
+                 balanceOf[msg.sender] = bal.sub(tokens);
+                 return;
+             } else {
+                 tokens = tokens.sub(bal);
+                 balanceOf[msg.sender] = 0;
+             }
+         }
+         // Now we need to charge the rest from 
+         require(token.transferFrom(msg.sender, address(this), tokens), "Transfer of tokens failed, insufficient approved balance?");
+         return;
+ 
+     }
+ 
+     function _askQuestion(bytes32 question_id, bytes32 content_hash, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 tokens) 
***************
*** 339,341
-     external payable {
-         questions[question_id].bounty = questions[question_id].bounty.add(msg.value);
-         emit LogFundAnswerBounty(question_id, msg.value, questions[question_id].bounty, msg.sender);
--- 401,404 -----
+     external {
+         _deductTokensOrRevert(tokens);
+         questions[question_id].bounty = questions[question_id].bounty.add(tokens);
+         emit LogFundAnswerBounty(question_id, tokens, questions[question_id].bounty, msg.sender);
***************
*** 353
-         bondMustDouble(question_id)
--- 417 -----
+         bondMustDouble(question_id, tokens)
***************
*** 385
-         bondMustDouble(question_id)
--- 451 -----
+         bondMustDouble(question_id, tokens)
